{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSocialCustomer, addSocialCustomer } from \"src/redux/features/socialCustomer/socialCustomerSlice\";\nimport ApiService from \"src/Utils/ApiService\";\nfunction useSocialCustomer() {\n  _s();\n  // Hook into Redux store for dispatching actions\n  const dispatch = useDispatch();\n  // React Query's client for managing cache and executing side effects on mutation\n  const queryClient = useQueryClient();\n\n  // Select the socialCustomer slice from the Redux store\n  const socialCustomer = useSelector(state => state.socialCustomer.socialCustomer);\n\n  // Initialize the API service for social customers\n  const socialCustomerApi = new ApiService(\"socialCustomerEndpoint\");\n\n  // React Query's useQuery hook to fetch social customers.\n  // If social customers are already present in the Redux store, it uses them as initial data.\n  // Otherwise, it fetches social customers from the server and updates the Redux store.\n  const {\n    isLoading,\n    isError,\n    error,\n    data\n  } = useQuery({\n    queryKey: [\"socialCustomer\"],\n    queryFn: async () => {\n      const data = await socialCustomerApi.getAll();\n      // Dispatch action to update Redux store with fetched social customers\n      dispatch(setSocialCustomer(data));\n      return data;\n    },\n    initialData: socialCustomer.length > 0 ? socialCustomer : undefined\n  });\n\n  // React Query's useMutation hook to handle adding a new social customer.\n  // It posts the new social customer to the server and, on success, updates the Redux store.\n  const addSocialCustomerMutation = useMutation({\n    mutationFn: newSocialCustomer => socialCustomerApi.create(newSocialCustomer),\n    onSuccess: data => {\n      // Dispatch action to add the new social customer to the Redux store\n      dispatch(addSocialCustomer(data));\n      // Invalidate 'socialCustomer' query to refetch if necessary, ensuring data consistency\n      queryClient.invalidateQueries({\n        queryKey: [\"socialCustomer\"]\n      });\n    }\n  });\n\n  // Return the social customer data, loading state, error state, and mutation function from the hook\n  return {\n    socialCustomer: data || socialCustomer,\n    isLoading,\n    isError,\n    error,\n    addSocialCustomerMutation\n  };\n}\n_s(useSocialCustomer, \"RTzkPraGFVWztSu53KpGTDKk2Q0=\", false, function () {\n  return [useDispatch, useQueryClient, useSelector, useQuery, useMutation];\n});\nexport default useSocialCustomer;","map":{"version":3,"names":["useMutation","useQuery","useQueryClient","useDispatch","useSelector","setSocialCustomer","addSocialCustomer","ApiService","useSocialCustomer","_s","dispatch","queryClient","socialCustomer","state","socialCustomerApi","isLoading","isError","error","data","queryKey","queryFn","getAll","initialData","length","undefined","addSocialCustomerMutation","mutationFn","newSocialCustomer","create","onSuccess","invalidateQueries"],"sources":["C:/Coding/Private_Projects/social-media-system/frontend/src/hooks/useSocialCustomer.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\nimport { ISocialCustomerModel } from \"src/Models/SocialCustomerModel\";\r\nimport {\r\n  setSocialCustomer,\r\n  addSocialCustomer,\r\n} from \"src/redux/features/socialCustomer/socialCustomerSlice\";\r\nimport ApiService from \"src/Utils/ApiService\";\r\n\r\nfunction useSocialCustomer() {\r\n  // Hook into Redux store for dispatching actions\r\n  const dispatch = useDispatch();\r\n  // React Query's client for managing cache and executing side effects on mutation\r\n  const queryClient = useQueryClient();\r\n\r\n  // Select the socialCustomer slice from the Redux store\r\n  const socialCustomer = useSelector(\r\n    (state: RootState) => state.socialCustomer.socialCustomer\r\n  );\r\n\r\n  \r\n  // Initialize the API service for social customers\r\n  const socialCustomerApi = new ApiService<ISocialCustomerModel>(\"socialCustomerEndpoint\");\r\n\r\n  // React Query's useQuery hook to fetch social customers.\r\n  // If social customers are already present in the Redux store, it uses them as initial data.\r\n  // Otherwise, it fetches social customers from the server and updates the Redux store.\r\n  const { isLoading, isError, error, data } = useQuery({\r\n    queryKey: [\"socialCustomer\"],\r\n    queryFn: async () => {\r\n      const data = await socialCustomerApi.getAll();\r\n      // Dispatch action to update Redux store with fetched social customers\r\n      dispatch(setSocialCustomer(data));\r\n      return data;\r\n    },\r\n    initialData: socialCustomer.length > 0 ? socialCustomer : undefined,\r\n  });\r\n\r\n  // React Query's useMutation hook to handle adding a new social customer.\r\n  // It posts the new social customer to the server and, on success, updates the Redux store.\r\n  const addSocialCustomerMutation = useMutation({\r\n    mutationFn: (newSocialCustomer: ISocialCustomerModel) => socialCustomerApi.create(newSocialCustomer),\r\n    onSuccess: (data) => {\r\n      // Dispatch action to add the new social customer to the Redux store\r\n      dispatch(addSocialCustomer(data));\r\n      // Invalidate 'socialCustomer' query to refetch if necessary, ensuring data consistency\r\n      queryClient.invalidateQueries({ queryKey: [\"socialCustomer\"] });\r\n    },\r\n  });\r\n\r\n  // Return the social customer data, loading state, error state, and mutation function from the hook\r\n  return {\r\n    socialCustomer: data || socialCustomer,\r\n    isLoading,\r\n    isError,\r\n    error,\r\n    addSocialCustomerMutation,\r\n  };\r\n}\r\n\r\nexport default useSocialCustomer;\r\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,EAAEC,cAAc,QAAQ,uBAAuB;AAC7E,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAGtD,SACEC,iBAAiB,EACjBC,iBAAiB,QACZ,uDAAuD;AAC9D,OAAOC,UAAU,MAAM,sBAAsB;AAE7C,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B;EACA,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B;EACA,MAAMQ,WAAW,GAAGT,cAAc,CAAC,CAAC;;EAEpC;EACA,MAAMU,cAAc,GAAGR,WAAW,CAC/BS,KAAgB,IAAKA,KAAK,CAACD,cAAc,CAACA,cAC7C,CAAC;;EAGD;EACA,MAAME,iBAAiB,GAAG,IAAIP,UAAU,CAAuB,wBAAwB,CAAC;;EAExF;EACA;EACA;EACA,MAAM;IAAEQ,SAAS;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGjB,QAAQ,CAAC;IACnDkB,QAAQ,EAAE,CAAC,gBAAgB,CAAC;IAC5BC,OAAO,EAAE,MAAAA,CAAA,KAAY;MACnB,MAAMF,IAAI,GAAG,MAAMJ,iBAAiB,CAACO,MAAM,CAAC,CAAC;MAC7C;MACAX,QAAQ,CAACL,iBAAiB,CAACa,IAAI,CAAC,CAAC;MACjC,OAAOA,IAAI;IACb,CAAC;IACDI,WAAW,EAAEV,cAAc,CAACW,MAAM,GAAG,CAAC,GAAGX,cAAc,GAAGY;EAC5D,CAAC,CAAC;;EAEF;EACA;EACA,MAAMC,yBAAyB,GAAGzB,WAAW,CAAC;IAC5C0B,UAAU,EAAGC,iBAAuC,IAAKb,iBAAiB,CAACc,MAAM,CAACD,iBAAiB,CAAC;IACpGE,SAAS,EAAGX,IAAI,IAAK;MACnB;MACAR,QAAQ,CAACJ,iBAAiB,CAACY,IAAI,CAAC,CAAC;MACjC;MACAP,WAAW,CAACmB,iBAAiB,CAAC;QAAEX,QAAQ,EAAE,CAAC,gBAAgB;MAAE,CAAC,CAAC;IACjE;EACF,CAAC,CAAC;;EAEF;EACA,OAAO;IACLP,cAAc,EAAEM,IAAI,IAAIN,cAAc;IACtCG,SAAS;IACTC,OAAO;IACPC,KAAK;IACLQ;EACF,CAAC;AACH;AAAChB,EAAA,CAjDQD,iBAAiB;EAAA,QAEPL,WAAW,EAERD,cAAc,EAGXE,WAAW,EAWUH,QAAQ,EAalBD,WAAW;AAAA;AAoB/C,eAAeQ,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}