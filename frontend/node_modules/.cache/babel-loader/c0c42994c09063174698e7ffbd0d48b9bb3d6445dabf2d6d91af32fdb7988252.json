{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\Private_Projects\\\\social-media-system\\\\frontend\\\\src\\\\Components\\\\Dropdown\\\\Dropdown.tsx\",\n  _s = $RefreshSig$();\nimport { memo, useState } from \"react\";\nimport { StyledDropdownContainer, StyledOptionItem, StyledOptionsList, StyledSelectedOption } from \"./Dropdown.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dropdown({\n  options,\n  onSelect,\n  placeholder,\n  renderOption\n}) {\n  _s();\n  /* The trailing comma (,) is a syntax detail that helps avoid parsing ambiguity in TypeScript when used with JSX.\r\n  If the TypeScript parser encounters this, it might get confused and interpret <T> as the start of a JSX tag rather than a generic type parameter.\r\n  */\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const handleSelect = option => {\n    setSelectedOption(option);\n    onSelect(option);\n    setIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(StyledDropdownContainer, {\n    children: [/*#__PURE__*/_jsxDEV(StyledSelectedOption, {\n      onClick: () => setIsOpen(!isOpen),\n      children: selectedOption ? renderOption(selectedOption) : placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(StyledOptionsList, {\n      children: options.map((option, index) => /*#__PURE__*/_jsxDEV(StyledOptionItem, {\n        onClick: () => handleSelect(option),\n        children: renderOption(option)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n_s(Dropdown, \"BpVbkn/NswzhRYWTNyv0RP2ekPc=\");\n_c = Dropdown;\n;\nexport default /*#__PURE__*/memo(Dropdown);\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["memo","useState","StyledDropdownContainer","StyledOptionItem","StyledOptionsList","StyledSelectedOption","jsxDEV","_jsxDEV","Dropdown","options","onSelect","placeholder","renderOption","_s","isOpen","setIsOpen","selectedOption","setSelectedOption","handleSelect","option","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","index","_c","$RefreshReg$"],"sources":["C:/Coding/Private_Projects/social-media-system/frontend/src/Components/Dropdown/Dropdown.tsx"],"sourcesContent":["import { memo, useState } from \"react\";\r\nimport { StyledDropdownContainer, StyledOptionItem, StyledOptionsList, StyledSelectedOption } from \"./Dropdown.styled\";\r\n\r\ninterface DropdownProps<T> {\r\n    options: T[];\r\n    onSelect: (value: T) => void;\r\n    placeholder?: string;\r\n    renderOption: (option: T) => React.ReactNode;\r\n}\r\n\r\n function Dropdown <T,>({options, onSelect, placeholder, renderOption}:DropdownProps<T>): JSX.Element {\r\n/* The trailing comma (,) is a syntax detail that helps avoid parsing ambiguity in TypeScript when used with JSX.\r\nIf the TypeScript parser encounters this, it might get confused and interpret <T> as the start of a JSX tag rather than a generic type parameter.\r\n*/\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const [selectedOption, setSelectedOption] = useState<T | null>(null);\r\n\r\n    const handleSelect = (option: T) => {\r\n        setSelectedOption(option);\r\n        onSelect(option);\r\n        setIsOpen(false);\r\n    };\r\n\r\n    return (\r\n        <StyledDropdownContainer>\r\n            <StyledSelectedOption onClick={() => setIsOpen(!isOpen)}>\r\n                {selectedOption ? renderOption(selectedOption) : placeholder}\r\n            </StyledSelectedOption>\r\n            {isOpen && (\r\n                <StyledOptionsList>\r\n                    {options.map((option, index) => (\r\n                        <StyledOptionItem key={index} onClick={() => handleSelect(option)}>\r\n                            {renderOption(option)}\r\n                        </StyledOptionItem>\r\n                    ))}\r\n                </StyledOptionsList>\r\n            )}\r\n        </StyledDropdownContainer>\r\n    );\r\n};\r\n    \r\n    export default memo(Dropdown) as typeof Dropdown;"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,OAAO;AACtC,SAASC,uBAAuB,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,oBAAoB,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAStH,SAASC,QAAQA,CAAM;EAACC,OAAO;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAA6B,CAAC,EAAe;EAAAC,EAAA;EACtG;AACA;AACA;EACI,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAW,IAAI,CAAC;EAEpE,MAAMiB,YAAY,GAAIC,MAAS,IAAK;IAChCF,iBAAiB,CAACE,MAAM,CAAC;IACzBT,QAAQ,CAACS,MAAM,CAAC;IAChBJ,SAAS,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,oBACIR,OAAA,CAACL,uBAAuB;IAAAkB,QAAA,gBACpBb,OAAA,CAACF,oBAAoB;MAACgB,OAAO,EAAEA,CAAA,KAAMN,SAAS,CAAC,CAACD,MAAM,CAAE;MAAAM,QAAA,EACnDJ,cAAc,GAAGJ,YAAY,CAACI,cAAc,CAAC,GAAGL;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,EACtBX,MAAM,iBACHP,OAAA,CAACH,iBAAiB;MAAAgB,QAAA,EACbX,OAAO,CAACiB,GAAG,CAAC,CAACP,MAAM,EAAEQ,KAAK,kBACvBpB,OAAA,CAACJ,gBAAgB;QAAakB,OAAO,EAAEA,CAAA,KAAMH,YAAY,CAACC,MAAM,CAAE;QAAAC,QAAA,EAC7DR,YAAY,CAACO,MAAM;MAAC,GADFQ,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACrB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACa,CACtB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACoB,CAAC;AAElC;AAACZ,EAAA,CA9BSL,QAAQ;AAAAoB,EAAA,GAARpB,QAAQ;AA8BjB;AAEG,4BAAeR,IAAI,CAACQ,QAAQ,CAAC;AAAoB,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}