{"ast":null,"code":"var _s2 = $RefreshSig$();\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ApiService from \"src/Utils/ApiService\";\nimport { setCustomerAddresses } from \"src/redux/features/customerAddresses/customerAddressesSlice\";\nfunction useCustomerAddresses() {\n  _s2();\n  var _s = $RefreshSig$();\n  const dispatch = useDispatch();\n  const customerAddresses = useSelector(state => state.customerAddresses.customersAddresses);\n  const apiService = new ApiService(\"projectCustomerEndPoint\");\n  const getCustomerAddressesById = async id => {\n    const data = await apiService.getById(id);\n    return data;\n  };\n  const useGetCustomerAddressesById = id => {\n    _s();\n    return useQuery([\"customerAddresses\", id], async () => {\n      const data = await getCustomerAddressesById(id);\n      dispatch(setCustomerAddresses(data));\n    }, {\n      /* Conditional Data Fetching: The enabled option in useQuery ensures that the query only runs when a valid project_id is provided.\r\n       By setting a default value of -1 for the project_id, the query is disabled until a valid project is selected. */\n\n      enabled: id !== -1 // Ensure the query is only enabled when an ID is valid\n    });\n  };\n  _s(useGetCustomerAddressesById, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [useQuery];\n  });\n  return {\n    customerAddresses,\n    useGetCustomerAddressesById\n  };\n}\n_s2(useCustomerAddresses, \"AYu30QhpbY9X0IRGWUiRuOdnmlY=\", false, function () {\n  return [useDispatch, useSelector];\n});\nexport default useCustomerAddresses;","map":{"version":3,"names":["useQuery","useDispatch","useSelector","ApiService","setCustomerAddresses","useCustomerAddresses","_s2","_s","$RefreshSig$","dispatch","customerAddresses","state","customersAddresses","apiService","getCustomerAddressesById","id","data","getById","useGetCustomerAddressesById","enabled"],"sources":["C:/Coding/Private_Projects/social-media-system/frontend/src/hooks/useCustomerAddresses.ts"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport IProjectCustomerDetailsModel from \"src/Models/ProjectCustomerDetailsModel\";\r\nimport ApiService from \"src/Utils/ApiService\";\r\nimport { setCustomerAddresses } from \"src/redux/features/customerAddresses/customerAddressesSlice\";\r\nimport { RootState } from \"src/redux/store\";\r\n\r\nfunction useCustomerAddresses() {\r\n  const dispatch = useDispatch();\r\n\r\n  const customerAddresses = useSelector(\r\n    (state: RootState) => state.customerAddresses.customersAddresses\r\n  );\r\n\r\n  const apiService = new ApiService<IProjectCustomerDetailsModel[]>(\r\n    \"projectCustomerEndPoint\"\r\n  );\r\n\r\n  const getCustomerAddressesById = async (id: number): Promise<IProjectCustomerDetailsModel[]> => {\r\n    const data = await apiService.getById(id);\r\n    return data;\r\n  };\r\n\r\n  const useGetCustomerAddressesById = (id: number) => {\r\n    return useQuery(\r\n      [\"customerAddresses\", id],\r\n      async () => {\r\n        const data = await getCustomerAddressesById(id);\r\n        dispatch(setCustomerAddresses(data));\r\n      },\r\n      {\r\n        /* Conditional Data Fetching: The enabled option in useQuery ensures that the query only runs when a valid project_id is provided.\r\n         By setting a default value of -1 for the project_id, the query is disabled until a valid project is selected. */\r\n\r\n         enabled: id !== -1, // Ensure the query is only enabled when an ID is valid\r\n      }\r\n    );\r\n  };\r\n  return {\r\n    customerAddresses,\r\n    useGetCustomerAddressesById,\r\n  };\r\n}\r\n\r\nexport default useCustomerAddresses;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,SAASC,oBAAoB,QAAQ,6DAA6D;AAGlG,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAC9B,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAMS,iBAAiB,GAAGR,WAAW,CAClCS,KAAgB,IAAKA,KAAK,CAACD,iBAAiB,CAACE,kBAChD,CAAC;EAED,MAAMC,UAAU,GAAG,IAAIV,UAAU,CAC/B,yBACF,CAAC;EAED,MAAMW,wBAAwB,GAAG,MAAOC,EAAU,IAA8C;IAC9F,MAAMC,IAAI,GAAG,MAAMH,UAAU,CAACI,OAAO,CAACF,EAAE,CAAC;IACzC,OAAOC,IAAI;EACb,CAAC;EAED,MAAME,2BAA2B,GAAIH,EAAU,IAAK;IAAAR,EAAA;IAClD,OAAOP,QAAQ,CACb,CAAC,mBAAmB,EAAEe,EAAE,CAAC,EACzB,YAAY;MACV,MAAMC,IAAI,GAAG,MAAMF,wBAAwB,CAACC,EAAE,CAAC;MAC/CN,QAAQ,CAACL,oBAAoB,CAACY,IAAI,CAAC,CAAC;IACtC,CAAC,EACD;MACE;AACR;;MAESG,OAAO,EAAEJ,EAAE,KAAK,CAAC,CAAC,CAAE;IACvB,CACF,CAAC;EACH,CAAC;EAACR,EAAA,CAdIW,2BAA2B;IAAA,QACxBlB,QAAQ;EAAA;EAcjB,OAAO;IACLU,iBAAiB;IACjBQ;EACF,CAAC;AACH;AAACZ,GAAA,CAnCQD,oBAAoB;EAAA,QACVJ,WAAW,EAEFC,WAAW;AAAA;AAkCvC,eAAeG,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}