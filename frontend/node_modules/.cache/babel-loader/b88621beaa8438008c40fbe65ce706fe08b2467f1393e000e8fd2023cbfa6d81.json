{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\Private_Projects\\\\social-media-system\\\\frontend\\\\src\\\\Components\\\\GenericTable\\\\GenericTable.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { StyledWrapper, StyleTableRow, StyledTable, StyledTableHeader, StyleFlipTbody, StyleFlipTableRowInner, StyledFlipTableDataFront, StyledFlipTableDataBack, StyledInput } from \"./GenericTable.styled\";\nimport Checkbox from \"../Checkbox/Checkbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GenericTable({\n  data,\n  selectedItems,\n  getItemId,\n  onSelectedItemsChange\n}) {\n  _s();\n  const [tableData, setTableData] = useState([]);\n  const [flippedRow, setFlippedRow] = useState(null);\n  const [editedData, setEditedData] = useState({});\n  useEffect(() => {\n    setTableData(data);\n  }, [data]);\n  const handleCardClick = itemId => {\n    setFlippedRow(flippedRow === itemId ? null : itemId);\n  };\n  const handleInputChange = (itemId, field, value) => {\n    setEditedData(prevData => ({\n      ...prevData,\n      [itemId]: {\n        ...prevData[itemId],\n        [field]: value\n      }\n    }));\n  };\n  const handleCheckboxChange = useCallback(item => {\n    const newCheckboxState = {\n      ...selectedItems\n    };\n    const itemId = getItemId(item);\n    if (newCheckboxState[itemId]) {\n      delete newCheckboxState[itemId];\n    } else {\n      newCheckboxState[itemId] = item;\n    }\n    onSelectedItemsChange(newCheckboxState);\n    return newCheckboxState;\n  }, [selectedItems, getItemId, onSelectedItemsChange]);\n  const tableHeaders = tableData.length > 0 ? Object.keys(tableData[0]) : [];\n  if (tableData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(StyledWrapper, {\n      children: \"Loading...\"\n    }, Math.random(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(StyledWrapper, {\n    className: \"generic-table\",\n    children: /*#__PURE__*/_jsxDEV(StyledTable, {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(StyleTableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableHeader, {\n            children: \"\"\n          }, \"header\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), tableHeaders.map(header => /*#__PURE__*/_jsxDEV(StyledTableHeader, {\n            children: header\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyleFlipTbody, {\n        children: tableData.map(item => {\n          const itemId = getItemId(item);\n          const isFlipped = flippedRow === itemId;\n          return /*#__PURE__*/_jsxDEV(StyleFlipTableRowInner, {\n            $isflipped: isFlipped // Use $ prefix for transient props\n            ,\n\n            onClick: () => handleCardClick(itemId),\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                id: `checkbox-${itemId}`,\n                label: \"\",\n                checked: !!selectedItems[itemId],\n                onChange: () => handleCheckboxChange(item)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), tableHeaders.map(header => /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(StyledFlipTableDataBack, {\n                $isflipped: isFlipped,\n                children: /*#__PURE__*/_jsxDEV(StyledInput, {\n                  type: \"text\",\n                  value: String(item[header]),\n                  onChange: e => handleInputChange(itemId, header, e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 25\n                }, this)\n              }, `${itemId}-${header}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(StyledFlipTableDataFront, {\n                $isflipped: isFlipped,\n                children: String(item[header])\n              }, `${itemId}-${header}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 47\n              }, this)]\n            }, void 0, true))]\n          }, itemId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, Math.random(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(GenericTable, \"sCbosCqTe0qYsZ+oHpzNDhiBFlY=\");\n_c = GenericTable;\nexport default GenericTable;\nvar _c;\n$RefreshReg$(_c, \"GenericTable\");","map":{"version":3,"names":["useState","useEffect","useCallback","StyledWrapper","StyleTableRow","StyledTable","StyledTableHeader","StyleFlipTbody","StyleFlipTableRowInner","StyledFlipTableDataFront","StyledFlipTableDataBack","StyledInput","Checkbox","jsxDEV","_jsxDEV","Fragment","_Fragment","GenericTable","data","selectedItems","getItemId","onSelectedItemsChange","_s","tableData","setTableData","flippedRow","setFlippedRow","editedData","setEditedData","handleCardClick","itemId","handleInputChange","field","value","prevData","handleCheckboxChange","item","newCheckboxState","tableHeaders","length","Object","keys","children","Math","random","fileName","_jsxFileName","lineNumber","columnNumber","className","map","header","isFlipped","$isflipped","onClick","id","label","checked","onChange","type","String","e","target","_c","$RefreshReg$"],"sources":["C:/Coding/Private_Projects/social-media-system/frontend/src/Components/GenericTable/GenericTable.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  StyledWrapper,\r\n  StyleTableRow,\r\n  StyledTable,\r\n  StyledTableHeader,\r\n  StyleFlipTbody,\r\n  StyleFlipTableRowInner,\r\n  StyledFlipTableDataFront,\r\n  StyledFlipTableDataBack,\r\n  StyledInput,\r\n} from \"./GenericTable.styled\";\r\nimport Checkbox from \"../Checkbox/Checkbox\";\r\n\r\nexport interface GenericTableProps<T extends object> {\r\n  data: T[];\r\n  selectedItems: Record<string, T>;\r\n  getItemId: (item: T) => number;\r\n  onSelectedItemsChange: (selectedItems: Record<string, T>) => void;\r\n}\r\n\r\nfunction GenericTable<T extends object>({\r\n  data,\r\n  selectedItems,\r\n  getItemId,\r\n  onSelectedItemsChange,\r\n}: GenericTableProps<T>): JSX.Element {\r\n  const [tableData, setTableData] = useState<T[]>([]);\r\n  const [flippedRow, setFlippedRow] = useState<number | null>(null);\r\n  const [editedData, setEditedData] = useState<Record<number, Partial<T>>>({});\r\n\r\n  useEffect(() => {\r\n    setTableData(data);\r\n  }, [data]);\r\n\r\n  const handleCardClick = (itemId: number) => {\r\n    setFlippedRow(flippedRow === itemId ? null : itemId);\r\n  };\r\n\r\n  const handleInputChange = (itemId: number, field: keyof T, value: string) => {\r\n    setEditedData((prevData) => ({\r\n      ...prevData,\r\n      [itemId]: {\r\n        ...prevData[itemId],\r\n        [field]: value,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleCheckboxChange = useCallback(\r\n    (item: T) => {\r\n      const newCheckboxState = { ...selectedItems };\r\n      const itemId = getItemId(item);\r\n      if (newCheckboxState[itemId]) {\r\n        delete newCheckboxState[itemId];\r\n      } else {\r\n        newCheckboxState[itemId] = item;\r\n      }\r\n      onSelectedItemsChange(newCheckboxState);\r\n      return newCheckboxState;\r\n    },\r\n    [selectedItems, getItemId, onSelectedItemsChange]\r\n  );\r\n\r\n  const tableHeaders = tableData.length > 0 ? Object.keys(tableData[0]) : [];\r\n\r\n  if (tableData.length === 0) {\r\n    return <StyledWrapper key={Math.random()}>Loading...</StyledWrapper>;\r\n  }\r\n\r\n  return (\r\n    <StyledWrapper className=\"generic-table\" key={Math.random()}>\r\n      <StyledTable>\r\n        <thead>\r\n          <StyleTableRow>\r\n            <StyledTableHeader key={\"header\"}>{\"\"}</StyledTableHeader>\r\n            {tableHeaders.map((header) => (\r\n              <StyledTableHeader key={header}>{header}</StyledTableHeader>\r\n            ))}\r\n          </StyleTableRow>\r\n        </thead>\r\n        <StyleFlipTbody>\r\n          {tableData.map((item) => {\r\n            const itemId = getItemId(item);\r\n            const isFlipped = flippedRow === itemId;\r\n            return (\r\n              <StyleFlipTableRowInner\r\n                $isflipped={isFlipped} // Use $ prefix for transient props\r\n                key={itemId}\r\n                onClick={() => handleCardClick(itemId)}\r\n              >\r\n                <td>\r\n                  <Checkbox\r\n                    id={`checkbox-${itemId}`}\r\n                    label=\"\"\r\n                    checked={!!selectedItems[itemId]}\r\n                    onChange={() => handleCheckboxChange(item)}\r\n                  />\r\n                </td>\r\n                {/* {tableHeaders.map((header) =>\r\n                  isFlipped ? (\r\n                    <StyledFlipTableDataBack $isflipped={isFlipped} key={`${itemId}-${header}`}>\r\n                      <StyledInput\r\n                        type=\"text\"\r\n                        value={String(item[header as keyof T])}\r\n                        onChange={(e) =>\r\n                          handleInputChange(itemId, header as keyof T, e.target.value)\r\n                        }\r\n                      />\r\n                    </StyledFlipTableDataBack>\r\n                  ) : (\r\n                    <StyledFlipTableDataFront $isflipped={isFlipped} key={`${itemId}-${header}`}>\r\n                      {String(item[header as keyof T])}\r\n                    </StyledFlipTableDataFront>\r\n                  )\r\n                )} */}\r\n                {tableHeaders.map((header) => \r\n                   \r\n                    <><StyledFlipTableDataBack $isflipped={isFlipped} key={`${itemId}-${header}`}>\r\n                        <StyledInput\r\n                            type=\"text\"\r\n                            value={String(item[header as keyof T])}\r\n                            onChange={(e) => handleInputChange(itemId, header as keyof T, e.target.value)} />\r\n                    </StyledFlipTableDataBack><StyledFlipTableDataFront $isflipped={isFlipped} key={`${itemId}-${header}`}>\r\n                            {String(item[header as keyof T])}\r\n                        </StyledFlipTableDataFront></>\r\n                  \r\n                )}\r\n              </StyleFlipTableRowInner>\r\n            );\r\n          })}\r\n        </StyleFlipTbody>\r\n      </StyledTable>\r\n    </StyledWrapper>\r\n  );\r\n}\r\n\r\nexport default GenericTable;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}