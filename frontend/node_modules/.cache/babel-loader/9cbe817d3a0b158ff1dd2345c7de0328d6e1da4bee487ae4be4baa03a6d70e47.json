{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\Private_Projects\\\\social-media-system\\\\frontend\\\\src\\\\Components\\\\GenericTable\\\\GenericTable.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { StyledWrapper, StyleTableRow, StyledTable, StyledTableHeader, StyleFlipTbody, StyleFlipTableRowInner, StyledFlipTableDataFront, StyledFlipTableDataBack, StyledInput } from \"./GenericTable.styled\";\nimport Checkbox from \"../Checkbox/Checkbox\";\nimport { useForm } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenericTable({\n  data,\n  selectedItems,\n  getItemId,\n  onSelectedItemsChange\n}) {\n  _s();\n  const [tableData, setTableData] = useState([]);\n  const [flippedRow, setFlippedRow] = useState(null);\n  const [editedData, setEditedData] = useState({});\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n  useEffect(() => {\n    setTableData(data);\n  }, [data]);\n  const handleCheckboxChange = useCallback(item => {\n    const newCheckboxState = {\n      ...selectedItems\n    };\n    const itemId = getItemId(item);\n    if (newCheckboxState[itemId]) {\n      delete newCheckboxState[itemId];\n    } else {\n      newCheckboxState[itemId] = item;\n    }\n    onSelectedItemsChange(newCheckboxState);\n    return newCheckboxState;\n  }, [selectedItems, getItemId, onSelectedItemsChange]);\n  const handleCardClick = itemId => {\n    if (itemId !== flippedRow) {\n      setFlippedRow(flippedRow === itemId ? null : itemId);\n    }\n  };\n  const handleInputChange = useCallback((itemId, field, value) => {\n    // setEditedData((prevData) => ({\n    //   ...prevData,\n    //   [itemId]: {\n    //     ...prevData[itemId],\n    //     [field]: value,\n    //   },\n    // }));\n  }, [data]);\n  const tableHeaders = useMemo(() => {\n    return data.length > 0 ? Object.keys(data[0]) : [];\n  }, [data]);\n  if (tableData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(StyledWrapper, {\n      children: \"Loading...\"\n    }, Math.random(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(StyledWrapper, {\n    className: \"generic-table\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: /*#__PURE__*/_jsxDEV(StyledTable, {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(StyleTableRow, {\n            children: [/*#__PURE__*/_jsxDEV(StyledTableHeader, {\n              children: \"\"\n            }, \"header\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 13\n            }, this), tableHeaders.map(header => /*#__PURE__*/_jsxDEV(StyledTableHeader, {\n              children: header\n            }, header, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(StyleFlipTbody, {\n          children: tableData.map(item => {\n            const itemId = getItemId(item);\n            const isFlipped = flippedRow === itemId;\n            return /*#__PURE__*/_jsxDEV(StyleFlipTableRowInner, {\n              onClick: () => handleCardClick(itemId),\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  id: `checkbox-${itemId}`,\n                  label: \"\",\n                  checked: !!selectedItems[itemId],\n                  onChange: () => handleCheckboxChange(item)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 17\n              }, this), tableHeaders.map(header => isFlipped ? /*#__PURE__*/_jsxDEV(StyledFlipTableDataBack, {\n                $isflipped: isFlipped // Use $ prefix for transient props\n                ,\n                children: /*#__PURE__*/_jsxDEV(StyledInput, {\n                  type: \"text\",\n                  value: String(item[header]),\n                  onChange: e => handleInputChange(itemId, header, e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 23\n                }, this)\n              }, `${itemId}-${header}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(StyledFlipTableDataFront, {\n                children: String(item[header])\n              }, `${itemId}-${header}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 21\n              }, this))]\n            }, itemId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)\n  }, Math.random(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(GenericTable, \"P0wFfqAprKwFj9S5hLWQz5JtYqg=\", false, function () {\n  return [useForm];\n});\n_c = GenericTable;\nexport default GenericTable;\nvar _c;\n$RefreshReg$(_c, \"GenericTable\");","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","StyledWrapper","StyleTableRow","StyledTable","StyledTableHeader","StyleFlipTbody","StyleFlipTableRowInner","StyledFlipTableDataFront","StyledFlipTableDataBack","StyledInput","Checkbox","useForm","jsxDEV","_jsxDEV","GenericTable","data","selectedItems","getItemId","onSelectedItemsChange","_s","tableData","setTableData","flippedRow","setFlippedRow","editedData","setEditedData","register","handleSubmit","handleCheckboxChange","item","newCheckboxState","itemId","handleCardClick","handleInputChange","field","value","tableHeaders","length","Object","keys","children","Math","random","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","map","header","isFlipped","onClick","id","label","checked","onChange","$isflipped","type","String","e","target","_c","$RefreshReg$"],"sources":["C:/Coding/Private_Projects/social-media-system/frontend/src/Components/GenericTable/GenericTable.tsx"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport {\r\n  StyledWrapper,\r\n  StyleTableRow,\r\n  StyledTable,\r\n  StyledTableHeader,\r\n  StyleFlipTbody,\r\n  StyleFlipTableRowInner,\r\n  StyledFlipTableDataFront,\r\n  StyledFlipTableDataBack,\r\n  StyledInput,\r\n} from \"./GenericTable.styled\";\r\nimport Checkbox from \"../Checkbox/Checkbox\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\n\r\nexport interface GenericTableProps<T extends object> {\r\n  data: T[];\r\n  selectedItems: Record<string, T>;\r\n  getItemId: (item: T) => number;\r\n  onSelectedItemsChange: (selectedItems: Record<string, T>) => void;\r\n}\r\n\r\nfunction GenericTable<T extends object>({\r\n  data,\r\n  selectedItems,\r\n  getItemId,\r\n  onSelectedItemsChange,\r\n}: GenericTableProps<T>): JSX.Element {\r\n  const [tableData, setTableData] = useState<T[]>([]);\r\n  const [flippedRow, setFlippedRow] = useState<number | null>(null);\r\n  const [editedData, setEditedData] = useState<Record<number, Partial<T>>>({});\r\n  const { register, handleSubmit } = useForm<T>();\r\n\r\n  useEffect(() => {\r\n    setTableData(data);\r\n  }, [data]);\r\n\r\n  \r\n  const handleCheckboxChange = useCallback(\r\n    (item: T) => {\r\n      const newCheckboxState = { ...selectedItems };\r\n      const itemId = getItemId(item);\r\n      if (newCheckboxState[itemId]) {\r\n        delete newCheckboxState[itemId];\r\n      } else {\r\n        newCheckboxState[itemId] = item;\r\n      }\r\n      onSelectedItemsChange(newCheckboxState);\r\n      return newCheckboxState;\r\n    },\r\n    [selectedItems, getItemId, onSelectedItemsChange]\r\n  );\r\n\r\n  const handleCardClick = (itemId: number) => {\r\n    if(itemId !== flippedRow){\r\n\r\n    setFlippedRow(flippedRow === itemId ? null : itemId);\r\n    }\r\n};\r\n\r\n  const handleInputChange = useCallback( (itemId: number, field: keyof T, value: string) => {\r\n    // setEditedData((prevData) => ({\r\n    //   ...prevData,\r\n    //   [itemId]: {\r\n    //     ...prevData[itemId],\r\n    //     [field]: value,\r\n    //   },\r\n    // }));\r\n  },[data]);\r\n\r\n\r\n  const tableHeaders = useMemo(() => {\r\n    return data.length > 0 ? Object.keys(data[0]) : [];\r\n  }, [data]);\r\n\r\n  \r\n  if (tableData.length === 0) {\r\n    return <StyledWrapper key={Math.random()}>Loading...</StyledWrapper>;\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <StyledWrapper className=\"generic-table\" key={Math.random()}>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n      <StyledTable>\r\n        <thead>\r\n          <StyleTableRow>\r\n            <StyledTableHeader key={\"header\"}>{\"\"}</StyledTableHeader>\r\n            {tableHeaders.map((header) => (\r\n              <StyledTableHeader key={header}>{header}</StyledTableHeader>\r\n            ))}\r\n          </StyleTableRow>\r\n        </thead>\r\n        <StyleFlipTbody>\r\n          {tableData.map((item) => {\r\n            const itemId = getItemId(item);\r\n            const isFlipped = flippedRow === itemId;\r\n            return (\r\n              <StyleFlipTableRowInner\r\n                key={itemId}\r\n                onClick={() => handleCardClick(itemId)}\r\n              >\r\n                <td>\r\n                  <Checkbox\r\n                    id={`checkbox-${itemId}`}\r\n                    label=\"\"\r\n                    checked={!!selectedItems[itemId]}\r\n                    onChange={() => handleCheckboxChange(item)}\r\n                  />\r\n                </td>\r\n                {tableHeaders.map((header) =>\r\n                  isFlipped ? (\r\n                    <StyledFlipTableDataBack\r\n                      $isflipped={isFlipped} // Use $ prefix for transient props\r\n                      key={`${itemId}-${header}`}\r\n                    >\r\n                      <StyledInput\r\n                        type=\"text\"\r\n                        value={String(item[header as keyof T])}\r\n                        onChange={(e) =>\r\n                          handleInputChange(\r\n                            itemId,\r\n                            header as keyof T,\r\n                            e.target.value\r\n                          )\r\n                        }\r\n                      />\r\n                    </StyledFlipTableDataBack>\r\n                  ) : (\r\n                    <StyledFlipTableDataFront\r\n                      key={`${itemId}-${header}`}\r\n                    >\r\n                      {String(item[header as keyof T])}\r\n                    </StyledFlipTableDataFront>\r\n                  )\r\n                )}\r\n              </StyleFlipTableRowInner>\r\n            );\r\n          })}\r\n        </StyleFlipTbody>\r\n      </StyledTable>\r\n      </form>\r\n    </StyledWrapper>\r\n  );\r\n}\r\n\r\nexport default GenericTable;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}