{"ast":null,"code":"var _s2 = $RefreshSig$();\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ApiService from \"src/Utils/ApiService\";\nimport { setCustomerAddresses } from \"src/redux/features/customerAddresses/customerAddressesSlice\";\nfunction useCustomerAddresses() {\n  _s2();\n  var _s = $RefreshSig$();\n  // Hook into Redux store for dispatching actions\n  const dispatch = useDispatch();\n\n  // Select the customerAddresses slice from the Redux store\n  const customerAddresses = useSelector(state => state.customerAddresses.customersAddresses);\n\n  // Initialize the API service for customer addresses\n  const apiService = new ApiService(\"projectCustomerEndPoint\");\n\n  // Function to get customer addresses by ID from the API\n  const getCustomerAddressesById = async id => {\n    const data = await apiService.getById(id);\n    return data;\n  };\n\n  // React Query's useQuery hook to fetch customer addresses by ID.\n  // It fetches customer addresses from the server and updates the Redux store.\n  const useGetCustomerAddressesById = id => {\n    _s();\n    return useQuery({\n      queryKey: [\"customerAddresses\", id],\n      queryFn: async () => {\n        const data = await getCustomerAddressesById(id);\n        dispatch(setCustomerAddresses(data));\n        return data;\n      },\n      // Conditional Data Fetching: The enabled option in useQuery ensures that the query only runs when a valid project_id is provided.\n      // By setting a default value of -1 for the project_id, the query is disabled until a valid project is selected.\n      enabled: id !== -1 // Ensure the query is only enabled when an ID is valid\n    });\n  };\n\n  // Return the customer addresses data and the query function from the hook\n  _s(useGetCustomerAddressesById, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [useQuery];\n  });\n  return {\n    customerAddresses,\n    useGetCustomerAddressesById\n  };\n}\n_s2(useCustomerAddresses, \"AYu30QhpbY9X0IRGWUiRuOdnmlY=\", false, function () {\n  return [useDispatch, useSelector];\n});\nexport default useCustomerAddresses;","map":{"version":3,"names":["useQuery","useDispatch","useSelector","ApiService","setCustomerAddresses","useCustomerAddresses","_s2","_s","$RefreshSig$","dispatch","customerAddresses","state","customersAddresses","apiService","getCustomerAddressesById","id","data","getById","useGetCustomerAddressesById","queryKey","queryFn","enabled"],"sources":["C:/Coding/Private_Projects/social-media-system/frontend/src/hooks/useCustomerAddresses.ts"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport IProjectCustomerDetailsModel from \"src/Models/ProjectCustomerDetailsModel\";\r\nimport ApiService from \"src/Utils/ApiService\";\r\nimport { setCustomerAddresses } from \"src/redux/features/customerAddresses/customerAddressesSlice\";\r\nimport { RootState } from \"src/redux/store\";\r\n\r\nfunction useCustomerAddresses() {\r\n  // Hook into Redux store for dispatching actions\r\n  const dispatch = useDispatch();\r\n\r\n  // Select the customerAddresses slice from the Redux store\r\n  const customerAddresses = useSelector(\r\n    (state: RootState) => state.customerAddresses.customersAddresses\r\n  );\r\n\r\n  // Initialize the API service for customer addresses\r\n  const apiService = new ApiService<IProjectCustomerDetailsModel[]>(\r\n    \"projectCustomerEndPoint\"\r\n  );\r\n\r\n  // Function to get customer addresses by ID from the API\r\n  const getCustomerAddressesById = async (id: number): Promise<IProjectCustomerDetailsModel[]> => {\r\n    const data = await apiService.getById(id);\r\n    return data;\r\n  };\r\n\r\n  // React Query's useQuery hook to fetch customer addresses by ID.\r\n  // It fetches customer addresses from the server and updates the Redux store.\r\n  const useGetCustomerAddressesById = (id: number) => {\r\n    return useQuery({\r\n      queryKey: [\"customerAddresses\", id],\r\n      queryFn: async () => {\r\n        const data = await getCustomerAddressesById(id);\r\n        dispatch(setCustomerAddresses(data));\r\n        return data;\r\n      },\r\n      // Conditional Data Fetching: The enabled option in useQuery ensures that the query only runs when a valid project_id is provided.\r\n      // By setting a default value of -1 for the project_id, the query is disabled until a valid project is selected.\r\n      enabled: id !== -1, // Ensure the query is only enabled when an ID is valid\r\n    });\r\n  };\r\n\r\n  // Return the customer addresses data and the query function from the hook\r\n  return {\r\n    customerAddresses,\r\n    useGetCustomerAddressesById,\r\n  };\r\n}\r\n\r\nexport default useCustomerAddresses;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,SAASC,oBAAoB,QAAQ,6DAA6D;AAGlG,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAC9B;EACA,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMS,iBAAiB,GAAGR,WAAW,CAClCS,KAAgB,IAAKA,KAAK,CAACD,iBAAiB,CAACE,kBAChD,CAAC;;EAED;EACA,MAAMC,UAAU,GAAG,IAAIV,UAAU,CAC/B,yBACF,CAAC;;EAED;EACA,MAAMW,wBAAwB,GAAG,MAAOC,EAAU,IAA8C;IAC9F,MAAMC,IAAI,GAAG,MAAMH,UAAU,CAACI,OAAO,CAACF,EAAE,CAAC;IACzC,OAAOC,IAAI;EACb,CAAC;;EAED;EACA;EACA,MAAME,2BAA2B,GAAIH,EAAU,IAAK;IAAAR,EAAA;IAClD,OAAOP,QAAQ,CAAC;MACdmB,QAAQ,EAAE,CAAC,mBAAmB,EAAEJ,EAAE,CAAC;MACnCK,OAAO,EAAE,MAAAA,CAAA,KAAY;QACnB,MAAMJ,IAAI,GAAG,MAAMF,wBAAwB,CAACC,EAAE,CAAC;QAC/CN,QAAQ,CAACL,oBAAoB,CAACY,IAAI,CAAC,CAAC;QACpC,OAAOA,IAAI;MACb,CAAC;MACD;MACA;MACAK,OAAO,EAAEN,EAAE,KAAK,CAAC,CAAC,CAAE;IACtB,CAAC,CAAC;EACJ,CAAC;;EAED;EAAAR,EAAA,CAdMW,2BAA2B;IAAA,QACxBlB,QAAQ;EAAA;EAcjB,OAAO;IACLU,iBAAiB;IACjBQ;EACF,CAAC;AACH;AAACZ,GAAA,CAzCQD,oBAAoB;EAAA,QAEVJ,WAAW,EAGFC,WAAW;AAAA;AAsCvC,eAAeG,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}