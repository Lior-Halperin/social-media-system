{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ApiService from \"src/Utils/ApiService\";\nimport { setVolunteerProject } from \"src/redux/features/volunteerProjects/volunteerProjectsSlice\";\nfunction useVolunteerProject() {\n  _s();\n  // Hook into Redux store for dispatching actions\n  const dispatch = useDispatch();\n\n  // Select the volunteerProject slice from the Redux store\n  const volunteerProject = useSelector(state => state.volunteerProject.volunteerProject);\n\n  // Initialize the API service for volunteer projects\n  const volunteerProjectApi = new ApiService(\"volunteerProjectsEndPoint\");\n\n  // React Query's useQuery hook to fetch volunteer projects.\n  // If volunteer projects are already present in the Redux store, it uses them as initial data.\n  // Otherwise, it fetches volunteer projects from the server and updates the Redux store.\n  const {\n    isLoading,\n    isError,\n    error,\n    data\n  } = useQuery({\n    queryKey: [\"volunteerProject\"],\n    queryFn: async () => {\n      try {\n        const data = await volunteerProjectApi.getAll();\n        // Dispatch action to update Redux store with fetched volunteer projects\n        dispatch(setVolunteerProject(data));\n        return data;\n      } catch (err) {\n        console.log(err);\n        throw err;\n      }\n    },\n    initialData: volunteerProject.length > 0 ? volunteerProject : undefined\n  });\n\n  // Return the volunteer project data, loading state, error state from the hook\n  return {\n    volunteerProject: data || volunteerProject,\n    isLoading,\n    isError,\n    error\n  };\n}\n_s(useVolunteerProject, \"wM8bdyEJb2RJAFd8OV30IEjgp50=\", false, function () {\n  return [useDispatch, useSelector, useQuery];\n});\nexport default useVolunteerProject;","map":{"version":3,"names":["useQuery","useDispatch","useSelector","ApiService","setVolunteerProject","useVolunteerProject","_s","dispatch","volunteerProject","state","volunteerProjectApi","isLoading","isError","error","data","queryKey","queryFn","getAll","err","console","log","initialData","length","undefined"],"sources":["C:/Coding/Private_Projects/social-media-system/frontend/src/hooks/useVolunteerProjects.ts"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\nimport ApiService from \"src/Utils/ApiService\";\r\nimport { IVolunteerProjectModel } from \"src/Models/VolunteerProjectModel\";\r\nimport { setVolunteerProject } from \"src/redux/features/volunteerProjects/volunteerProjectsSlice\";\r\n\r\nfunction useVolunteerProject() {\r\n  // Hook into Redux store for dispatching actions\r\n  const dispatch = useDispatch();\r\n\r\n  // Select the volunteerProject slice from the Redux store\r\n  const volunteerProject = useSelector(\r\n    (state: RootState) => state.volunteerProject.volunteerProject\r\n  );\r\n\r\n  // Initialize the API service for volunteer projects\r\n  const volunteerProjectApi = new ApiService<IVolunteerProjectModel>(\r\n    \"volunteerProjectsEndPoint\"\r\n  );\r\n\r\n  // React Query's useQuery hook to fetch volunteer projects.\r\n  // If volunteer projects are already present in the Redux store, it uses them as initial data.\r\n  // Otherwise, it fetches volunteer projects from the server and updates the Redux store.\r\n  const { isLoading, isError, error, data } = useQuery({\r\n    queryKey: [\"volunteerProject\"],\r\n    queryFn: async () => {\r\n      try {\r\n        const data = await volunteerProjectApi.getAll();\r\n        // Dispatch action to update Redux store with fetched volunteer projects\r\n        dispatch(setVolunteerProject(data));\r\n        return data;\r\n      } catch (err: any) {\r\n        console.log(err);\r\n        throw err;\r\n      }\r\n    },\r\n    initialData: volunteerProject.length > 0 ? volunteerProject : undefined,\r\n  });\r\n\r\n  // Return the volunteer project data, loading state, error state from the hook\r\n  return {\r\n    volunteerProject: data || volunteerProject,\r\n    isLoading,\r\n    isError,\r\n    error,\r\n  };\r\n}\r\n\r\nexport default useVolunteerProject;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,UAAU,MAAM,sBAAsB;AAE7C,SAASC,mBAAmB,QAAQ,6DAA6D;AAEjG,SAASC,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC7B;EACA,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMO,gBAAgB,GAAGN,WAAW,CACjCO,KAAgB,IAAKA,KAAK,CAACD,gBAAgB,CAACA,gBAC/C,CAAC;;EAED;EACA,MAAME,mBAAmB,GAAG,IAAIP,UAAU,CACxC,2BACF,CAAC;;EAED;EACA;EACA;EACA,MAAM;IAAEQ,SAAS;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGd,QAAQ,CAAC;IACnDe,QAAQ,EAAE,CAAC,kBAAkB,CAAC;IAC9BC,OAAO,EAAE,MAAAA,CAAA,KAAY;MACnB,IAAI;QACF,MAAMF,IAAI,GAAG,MAAMJ,mBAAmB,CAACO,MAAM,CAAC,CAAC;QAC/C;QACAV,QAAQ,CAACH,mBAAmB,CAACU,IAAI,CAAC,CAAC;QACnC,OAAOA,IAAI;MACb,CAAC,CAAC,OAAOI,GAAQ,EAAE;QACjBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChB,MAAMA,GAAG;MACX;IACF,CAAC;IACDG,WAAW,EAAEb,gBAAgB,CAACc,MAAM,GAAG,CAAC,GAAGd,gBAAgB,GAAGe;EAChE,CAAC,CAAC;;EAEF;EACA,OAAO;IACLf,gBAAgB,EAAEM,IAAI,IAAIN,gBAAgB;IAC1CG,SAAS;IACTC,OAAO;IACPC;EACF,CAAC;AACH;AAACP,EAAA,CAxCQD,mBAAmB;EAAA,QAETJ,WAAW,EAGHC,WAAW,EAYQF,QAAQ;AAAA;AAyBtD,eAAeK,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}